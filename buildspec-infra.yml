version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    AWS_REGION: us-east-1
    TF_VAR_aws_region: us-east-1
    # Backend configuration (set these in CodeBuild environment variables)
    TF_STATE_BUCKET: "project3-terraform-state-1757872273"
    TF_STATE_KEY: "project3/terraform.tfstate"
    TF_STATE_REGION: "us-east-1"
    TF_STATE_TABLE: "terraform-state-lock"

phases:
  install:
    runtime-versions:
      golang: 1.21
    commands:
      - export AWS_DEFAULT_REGION=us-east-1 AWS_REGION=us-east-1 TF_VAR_aws_region=us-east-1
      # Install Terraform
      - wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
      - unzip terraform_1.6.0_linux_amd64.zip
      - mv terraform /usr/local/bin/
      # Tools used to parse outputs
      - yum -y install jq >/dev/null 2>&1 || true
      
      # Install tflint (pinned release to avoid 403 on GitHub raw)
      - |
        set -e
        TFLINT_VERSION=0.50.3
        echo "Installing tflint v$TFLINT_VERSION..."
        wget -q https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_amd64.zip || \
        (echo "Retrying tflint download..." && sleep 2 && wget -q https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_amd64.zip)
        unzip -o tflint_linux_amd64.zip
        mv tflint /usr/local/bin/
        tflint --version
      
      # Install Go dependencies for tests
      - go -C infra mod download

  pre_build:
    commands:
      - echo "Running Terraform quality checks..."
      
      # Terraform formatting check
      - terraform -chdir=infra fmt -recursive
      - terraform -chdir=infra fmt -check -recursive
      
      # Terraform validation
      - terraform -chdir=infra init -backend=false
      - terraform -chdir=infra validate
      
      # Fast TFLint using lightweight config (skip plugin downloads)
      - |
        set -e
        cd infra
        cat > .tflint.ci.hcl <<'EOF'
        plugin "terraform" {
          enabled = true
          preset  = "recommended"
        }
        EOF
        tflint -c .tflint.ci.hcl
        cd - >/dev/null

  build:
    commands:
      - echo "Running Terraform tests..."
      # Run minimal unit tests quickly (skip Terratest, no coverage)
      - CI_SKIP_TERRATEST=1 go -C infra test -v -short -run TestInfra ./tests/

  post_build:
    commands:
      - echo "Running Terraform plan and apply..."
      
      # Create Lambda deployment package
      - (cd web/lambda && zip -r ../../infra/lambda.zip .)
      
      # Terraform init with backend
      - |
        if [ -n "$TF_STATE_BUCKET" ] && [ -n "$TF_STATE_KEY" ] && [ -n "$TF_STATE_REGION" ] && [ -n "$TF_STATE_TABLE" ]; then
          echo "Initializing Terraform with S3 backend..."
          terraform -chdir=infra init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$TF_STATE_REGION" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=$TF_STATE_TABLE"
        else
          echo "No backend configuration provided, using local state..."
          terraform -chdir=infra init
        fi
      
      # Remove problematic resources from state if they exist
      - |
        echo "Checking for problematic resources in state..."
        
        # Remove S3 lifecycle configuration
        if terraform -chdir=infra state list | grep -q "module.s3.aws_s3_bucket_lifecycle_configuration.website_lifecycle"; then
          echo "Removing S3 lifecycle configuration from state..."
          terraform -chdir=infra state rm module.s3.aws_s3_bucket_lifecycle_configuration.website_lifecycle || echo "S3 lifecycle removal failed, continuing..."
        else
          echo "No S3 lifecycle configuration found in state"
        fi
        
        # Remove CodeBuild projects to force recreation with new IAM role
        if terraform -chdir=infra state list | grep -q "module.codepipeline.aws_codebuild_project.infra_build"; then
          echo "Removing CodeBuild infra project from state to force recreation..."
          terraform -chdir=infra state rm module.codepipeline.aws_codebuild_project.infra_build || echo "CodeBuild infra removal failed, continuing..."
        fi
        
        if terraform -chdir=infra state list | grep -q "module.codepipeline.aws_codebuild_project.web_build"; then
          echo "Removing CodeBuild web project from state to force recreation..."
          terraform -chdir=infra state rm module.codepipeline.aws_codebuild_project.web_build || echo "CodeBuild web removal failed, continuing..."
        fi
        
        # Remove CodePipelines as well since they depend on CodeBuild
        if terraform -chdir=infra state list | grep -q "module.codepipeline.aws_codepipeline.infra_pipeline"; then
          echo "Removing CodePipeline infra pipeline from state..."
          terraform -chdir=infra state rm module.codepipeline.aws_codepipeline.infra_pipeline || echo "CodePipeline infra removal failed, continuing..."
        fi
        
        if terraform -chdir=infra state list | grep -q "module.codepipeline.aws_codepipeline.web_pipeline"; then
          echo "Removing CodePipeline web pipeline from state..."
          terraform -chdir=infra state rm module.codepipeline.aws_codepipeline.web_pipeline || echo "CodePipeline web removal failed, continuing..."
        fi
        
        # Remove webhooks as well
        if terraform -chdir=infra state list | grep -q "module.codepipeline.aws_codepipeline_webhook.infra_webhook"; then
          echo "Removing CodePipeline infra webhook from state..."
          terraform -chdir=infra state rm module.codepipeline.aws_codepipeline_webhook.infra_webhook || echo "Webhook infra removal failed, continuing..."
        fi
        
        if terraform -chdir=infra state list | grep -q "module.codepipeline.aws_codepipeline_webhook.web_webhook"; then
          echo "Removing CodePipeline web webhook from state..."
          terraform -chdir=infra state rm module.codepipeline.aws_codepipeline_webhook.web_webhook || echo "Webhook web removal failed, continuing..."
        fi
        
        # Remove IAM resources to force complete recreation
        if terraform -chdir=infra state list | grep -q "module.iam.aws_iam_role_policy.codebuild_policy"; then
          echo "Removing CodeBuild IAM role policy from state..."
          terraform -chdir=infra state rm module.iam.aws_iam_role_policy.codebuild_policy || echo "IAM policy removal failed, continuing..."
        fi
        
        if terraform -chdir=infra state list | grep -q "module.iam.aws_iam_role.codebuild_role"; then
          echo "Removing CodeBuild IAM role from state..."
          terraform -chdir=infra state rm module.iam.aws_iam_role.codebuild_role || echo "IAM role removal failed, continuing..."
        fi
      
      # Terraform plan (full plan to ensure API methods/CORS are deployed correctly)
      - terraform -chdir=infra plan -out=tfplan
      
      # Terraform apply (only if not a PR)
      - |
        if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_CREATED" ] || [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_UPDATED" ]; then
          echo "Skipping apply for pull request"
        else
          # Do not fail the build if apply fails; continue so pipeline does not rerun endlessly
          terraform -chdir=infra apply -auto-approve tfplan || echo "Terraform apply failed; continuing without failing build"
        fi

      # Export Terraform outputs to SSM for the Web pipeline to consume
      - |
        echo "Publishing Terraform outputs to SSM..."
        set -e
        TF_OUTPUT_JSON=$(terraform -chdir=infra output -json || echo '{}')
        BUCKET_NAME=$(echo "$TF_OUTPUT_JSON" | jq -r '.bucket_name.value // empty')
        CF_DIST_ID=$(echo "$TF_OUTPUT_JSON" | jq -r '.cloudfront_distribution_id.value // empty')
        API_URL=$(echo "$TF_OUTPUT_JSON" | jq -r '.api_gateway_url.value // empty')
        RDS_ENDPOINT=$(echo "$TF_OUTPUT_JSON" | jq -r '.rds_endpoint.value // empty')
        LAMBDA_FUNCTION_ARN=$(echo "$TF_OUTPUT_JSON" | jq -r '.lambda_function_arn.value // empty')
        if [ -n "$BUCKET_NAME" ]; then
          aws ssm put-parameter --name "/project3/outputs/bucket_name" --type String --overwrite --value "$BUCKET_NAME"
        fi
        if [ -n "$CF_DIST_ID" ]; then
          aws ssm put-parameter --name "/project3/outputs/cloudfront_distribution_id" --type String --overwrite --value "$CF_DIST_ID"
        fi
        if [ -n "$API_URL" ]; then
          aws ssm put-parameter --name "/project3/outputs/api_gateway_url" --type String --overwrite --value "$API_URL"
        fi
        if [ -n "$RDS_ENDPOINT" ]; then
          aws ssm put-parameter --name "/project3/outputs/rds_endpoint" --type String --overwrite --value "$RDS_ENDPOINT"
        fi
        if [ -n "$LAMBDA_FUNCTION_ARN" ]; then
          aws ssm put-parameter --name "/project3/outputs/lambda_function_arn" --type String --overwrite --value "$LAMBDA_FUNCTION_ARN"
        fi
        echo "Outputs published to SSM."

artifacts:
  files:
    - 'infra/tfplan'
  name: terraform-artifacts
