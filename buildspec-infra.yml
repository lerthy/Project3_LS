version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: eu-north-1
    AWS_REGION: eu-north-1
    TF_VAR_aws_region: eu-north-1
    TF_STATE_BUCKET: "terraform-state-project3-eunorth1-20251004-lerdisalihi"
    TF_STATE_KEY: "project3/terraform.tfstate"
    TF_STATE_REGION: "eu-north-1"
    TF_STATE_TABLE: "terraform-state-lock"
    TF_VAR_notification_email: "lerdi890@gmail.com"
    TF_VAR_approval_email: "lerdi890@gmail.com"

phases:
  install:
    commands:
      - echo "Honoring configured region - AWS_REGION=$AWS_REGION"
      - wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
      - unzip terraform_1.6.0_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - yum -y install jq >/dev/null 2>&1 || true
      - |
        set -e
        TFLINT_VERSION=0.50.3
        echo "Installing tflint v$TFLINT_VERSION..."
        wget -q https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_amd64.zip
        unzip -o tflint_linux_amd64.zip
        mv tflint /usr/local/bin/
        tflint --version

  pre_build:
    commands:
      - echo "=== OPERATIONAL EXCELLENCE Pre-Build Validation ==="
      - echo "Terraform formatting check"
      - terraform -chdir=infra fmt -recursive
      - terraform -chdir=infra fmt -check -recursive
      - echo "Create Lambda ZIP files for validation"
      - (cd infra/modules/disaster-recovery && zip -r disaster_recovery.zip disaster_recovery.py || echo "disaster_recovery.py not found, creating empty zip" && touch empty.txt && zip disaster_recovery.zip empty.txt)
      - (cd infra/modules/rpo-enhancement && zip -r hourly_backup.zip hourly_backup.py || echo "hourly_backup.py not found, creating empty zip" && touch empty.txt && zip hourly_backup.zip empty.txt)
      - echo "Terraform validation"
      - terraform -chdir=infra init -backend=false
      - terraform -chdir=infra validate
      - echo "=== SECURITY SCANNING ==="
      - echo "Installing tfsec security scanner..."
      - wget -q https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64 -O tfsec
      - chmod +x tfsec
      - echo "Running comprehensive security scan with tfsec..."
      - |
        if ! ./tfsec infra/ --format json --out tfsec-report.json; then
          echo "‚ùå CRITICAL: Security vulnerabilities detected!"
          ./tfsec infra/ --format lovely
          echo "Security scan failed. Please fix vulnerabilities before proceeding."
          exit 1
        else
          echo "‚úÖ Security scan passed - no critical vulnerabilities found"
          ./tfsec infra/ --format lovely
        fi
      - echo "Running TFLint for best practices..."
      - |
        if ! tflint -c .tflint.ci.hcl infra/; then
          echo "‚ùå WARNING: Terraform best practice violations found!"
          echo "TFLint findings detected. Please review and fix."
        else
          echo "‚úÖ TFLint passed - code follows best practices"
        fi

  build:
    commands:
      - echo "=== OPERATIONAL EXCELLENCE Infrastructure Testing ==="
      - echo "Checking deployment readiness..."
      - |
        if [ "$DEPLOYMENT_STAGE" = "DEPLOY" ]; then
          echo "üöÄ DEPLOYMENT PHASE: Applying infrastructure changes..."
          
          # Initialize Terraform with backend
          terraform -chdir=infra init -backend-config="bucket=$TF_STATE_BUCKET" \
                                      -backend-config="key=$TF_STATE_KEY" \
                                      -backend-config="region=$TF_STATE_REGION" \
                                      -backend-config="encrypt=true" \
                                      -backend-config="dynamodb_table=$TF_STATE_TABLE"
          
          # Plan and Apply with health checks
          echo "Creating deployment plan..."
          terraform -chdir=infra plan -out=tfplan
          
          echo "Applying infrastructure changes..."
          if terraform -chdir=infra apply -auto-approve tfplan; then
            echo "‚úÖ Infrastructure deployment successful"
            
            # Post-deployment health checks
            echo "Running post-deployment health checks..."
            sleep 30  # Allow resources to initialize
            
            # Validate key resources are healthy
            aws lambda get-function --function-name contact-form --region $AWS_REGION || echo "‚ö†Ô∏è Lambda function health check failed"
            aws apigateway get-rest-apis --region $AWS_REGION | grep contact-api || echo "‚ö†Ô∏è API Gateway health check failed"
            
            echo "‚úÖ Deployment health checks completed"
          else
            echo "‚ùå Infrastructure deployment failed!"
            exit 1
          fi
        else
          echo "üìã VALIDATION PHASE: Running infrastructure tests only..."
          echo "Infrastructure validation completed in pre_build phase"
          echo "‚úÖ Ready for deployment approval"
        fi

  post_build:
    commands:
      - echo "=== OPERATIONAL EXCELLENCE Post-Deployment Validation ==="
      - echo "Create Lambda deployment package"
      - (cd web/lambda && zip -r ../../infra/lambda.zip .)
      - echo "Validating Terraform backend prerequisites..."
      - chmod +x validate-backend.sh
      - ./validate-backend.sh
      - |
        if [ -n "$TF_STATE_BUCKET" ] && [ -n "$TF_STATE_KEY" ] && [ -n "$TF_STATE_REGION" ] && [ -n "$TF_STATE_TABLE" ]; then
          echo "Initializing Terraform with S3 backend..."
          terraform -chdir=infra init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$TF_STATE_REGION" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=$TF_STATE_TABLE"
        else
          echo "No backend configuration provided, using local state..."
          terraform -chdir=infra init
        fi
      - echo "Validating Terraform state consistency..."
      - terraform -chdir=infra plan -out=tfplan
      - |
        if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_CREATED" ] || [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_UPDATED" ]; then
          echo "Skipping apply for pull request"
        else
          echo "=== P2 RELIABILITY: INFRASTRUCTURE DEPLOYMENT WITH ROLLBACK PROTECTION ==="
          
          # Initialize rollback system for infrastructure
          export SERVICE_NAME="infrastructure"
          if [ -f "scripts/automated-rollback.sh" ]; then
            ./scripts/automated-rollback.sh init
          fi
          
          echo "=== PHASE 1: Deploy IAM permissions first ==="
          if ! terraform -chdir=infra apply -target=module.iam -auto-approve; then
            echo "‚ùå IAM deployment failed - initiating rollback"
            if [ -f "scripts/automated-rollback.sh" ]; then
              ./scripts/automated-rollback.sh rollback "IAM deployment failure"
            fi
            exit 1
          fi
          
          echo "Waiting 30 seconds for IAM propagation..."
          sleep 30
          
          echo "=== PHASE 2: Deploy remaining infrastructure ==="
          if ! terraform -chdir=infra apply -auto-approve tfplan; then
            echo "‚ùå Infrastructure deployment failed - initiating rollback"
            if [ -f "scripts/automated-rollback.sh" ]; then
              ./scripts/automated-rollback.sh rollback "Infrastructure deployment failure"
            fi
            exit 1
          fi
          
          echo "üéâ P2 RELIABILITY: Infrastructure deployment completed successfully with rollback protection!"
        fi

artifacts:
  files:
    - 'infra/tfplan'
    - 'validate-backend.sh'
    - 'deployment-report.txt'
    - 'test-results.json'
    - 'tfsec-report.json'
  name: terraform-artifacts