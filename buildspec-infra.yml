version: 0.2

phases:
  install:
    runtime-versions:
      golang: 1.21
    commands:
      # Install required packages
      - apt-get update && apt-get install -y bc unzip
      
      # Install Terraform
      - wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
      - unzip terraform_1.6.0_linux_amd64.zip
      - sudo mv terraform /usr/local/bin/
      
      # Install tflint
      - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      
      # Install Go dependencies for tests
      - go -C infra mod download

  pre_build:
    commands:
      - echo "Running Terraform quality checks..."
      
      # Terraform formatting check
      - terraform -chdir=infra fmt -recursive
      - terraform -chdir=infra fmt -check -recursive
      
      # Terraform validation (without backend)
      - terraform -chdir=infra init -backend=false
      - terraform -chdir=infra validate
      
      # TFLint
      - (cd infra && tflint --init)
      - (cd infra && tflint)

  build:
    commands:
      - echo "Running Terraform tests..."
      
      # Run unit tests with coverage (short mode to skip slow checks)
      - CI_SKIP_TERRATEST=1 go -C infra test -v -short -coverprofile=coverage.out ./tests/
      - go -C infra tool cover -func=coverage.out
      
      # Check coverage threshold (60%)
      - |
        COVERAGE=$(go -C infra tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if [ $(echo "$COVERAGE < 60" | bc -l) -eq 1 ]; then
          echo "Coverage $COVERAGE% is below required 60%"
          exit 1
        fi
        echo "Coverage $COVERAGE% meets requirement"

  post_build:
    commands:
      - echo "Running Terraform plan and apply..."
      
      # Create Lambda deployment package
      - (cd web/lambda && zip -r ../../infra/lambda.zip .)
      
      # Initialize Terraform backend (required for each phase)
      - terraform -chdir=infra init -reconfigure
      
      # Terraform plan
      - terraform -chdir=infra plan -out=tfplan
      
      # Terraform apply (only if not a PR)
      - |
        if [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_CREATED" ] || [ "$CODEBUILD_WEBHOOK_EVENT" = "PULL_REQUEST_UPDATED" ]; then
          echo "Skipping apply for pull request"
        else
          # Apply Terraform
          terraform -chdir=infra apply -auto-approve tfplan
          
          # Store infrastructure outputs in SSM Parameter Store
          echo "Storing infrastructure outputs in SSM Parameter Store..."
          
          # Store API Gateway URL
          API_GATEWAY_ID=$(terraform -chdir=infra output -raw api_gateway_id)
          API_URL="https://${API_GATEWAY_ID}.execute-api.${AWS_DEFAULT_REGION}.amazonaws.com/dev/contact"
          aws ssm put-parameter --name "/project3/api-gateway-url" --value "$API_URL" --overwrite
          echo "Stored API Gateway URL: $API_URL"
          
          # Store S3 bucket name
          S3_BUCKET=$(terraform -chdir=infra output -raw s3_bucket_name)
          aws ssm put-parameter --name "/project3/s3-bucket" --value "$S3_BUCKET" --overwrite
          echo "Stored S3 Bucket: $S3_BUCKET"
          
          # Store CloudFront distribution ID
          CLOUDFRONT_ID=$(terraform -chdir=infra output -raw cloudfront_distribution_id)
          aws ssm put-parameter --name "/project3/cloudfront-distribution-id" --value "$CLOUDFRONT_ID" --overwrite
          echo "Stored CloudFront Distribution ID: $CLOUDFRONT_ID"
          
          # Store Lambda function name
          LAMBDA_NAME=$(terraform -chdir=infra output -raw lambda_function_name)
          aws ssm put-parameter --name "/project3/lambda-function-name" --value "$LAMBDA_NAME" --overwrite
          echo "Stored Lambda Function Name: $LAMBDA_NAME"
          
          echo "Infrastructure deployment and SSM parameter storage completed!"
          
          # Create web pipeline (if it doesn't exist)
          echo "Creating web application pipeline..."
          if aws codepipeline get-pipeline --name project3-web-pipeline >/dev/null 2>&1; then
            echo "Web pipeline already exists, skipping creation"
          else
            echo "Creating new web pipeline..."
            
            # Get required values
            GITHUB_TOKEN=$(aws ssm get-parameter --name "/project3/github/token" --with-decryption --query 'Parameter.Value' --output text)
            ARTIFACTS_BUCKET=$(terraform -chdir=infra output -raw codepipeline_artifacts_bucket)
            PIPELINE_ROLE_ARN=$(terraform -chdir=infra output -raw codepipeline_role_arn || aws iam get-role --role-name codepipeline-role-fb49b77e --query 'Role.Arn' --output text)
            
            # Create pipeline JSON
            cat > web-pipeline.json << EOF
        {
          "pipeline": {
            "name": "project3-web-pipeline",
            "roleArn": "$PIPELINE_ROLE_ARN",
            "artifactStore": {
              "type": "S3",
              "location": "$ARTIFACTS_BUCKET"
            },
            "stages": [
              {
                "name": "Source",
                "actions": [
                  {
                    "name": "Source",
                    "actionTypeId": {
                      "category": "Source",
                      "owner": "ThirdParty",
                      "provider": "GitHub",
                      "version": "1"
                    },
                    "configuration": {
                      "Owner": "lerthy",
                      "Repo": "Project3_LS",
                      "Branch": "sibora",
                      "OAuthToken": "$GITHUB_TOKEN",
                      "PollForSourceChanges": "false"
                    },
                    "outputArtifacts": [{"name": "source_output"}]
                  }
                ]
              },
              {
                "name": "Build",
                "actions": [
                  {
                    "name": "Build",
                    "actionTypeId": {
                      "category": "Build",
                      "owner": "AWS",
                      "provider": "CodeBuild",
                      "version": "1"
                    },
                    "configuration": {
                      "ProjectName": "project3-web-build"
                    },
                    "inputArtifacts": [{"name": "source_output"}]
                  }
                ]
              }
            ]
          }
        }
        EOF
            
            # Create the pipeline
            aws codepipeline create-pipeline --cli-input-json file://web-pipeline.json
            echo "✅ Web pipeline created successfully!"
          fi
          
          # Trigger web pipeline after successful infrastructure deployment
          echo "Triggering web pipeline..."
          aws codepipeline start-pipeline-execution --name project3-web-pipeline
          echo "✅ Web pipeline triggered successfully!"
        fi

artifacts:
  files:
    - 'infra/tfplan'
    - 'infra/coverage.out'
    - 'infra/terraform.tfstate'
    - 'web-pipeline.json'
  name: infra-artifacts

cache:
  paths:
    - 'infra/.terraform/**/*'
