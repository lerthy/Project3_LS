version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    AWS_REGION: us-east-1

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      # Install dependencies for web frontend
      - npm --prefix web ci || npm --prefix web install
      
      # Install dependencies for Lambda function
      - npm --prefix web/lambda ci || npm --prefix web/lambda install

  pre_build:
    commands:
      - echo "Running frontend quality checks..."
      
      # ESLint for JavaScript
      - npm --prefix web run lint:js
      
      # Stylelint for CSS
      - npm --prefix web run lint:css
      
      # ESLint for Lambda function
      - npm --prefix web/lambda run lint

  build:
    commands:
      - echo "Running tests..."
      
      # Frontend tests with coverage
      - npm --prefix web run test
      
      # Lambda tests with coverage
      - npm --prefix web/lambda run test
      
  # Optimize static assets (images, JS, CSS)
  - echo "Optimizing static assets..."
  - npm --prefix web run optimize:assets || echo "Asset optimization skipped (no script)"
  - echo "Building static site..."
  # For this project, static files are already built
  # In a real Vite project, you'd run: npm run build

  post_build:
    commands:
      - echo "Fetching Terraform outputs from SSM and deploying..."

      # Fetch SSM parameters from module-specific parameters
      - |
        set -e
        echo "AWS region: ${AWS_REGION:-unset}"
        echo "Fetching SSM parameters from module-specific stores..."
        
        # Fetch from module-specific SSM parameters
        BUCKET_NAME=$(aws ssm get-parameter --name "/s3/website_bucket_name" --query 'Parameter.Value' --output text)
        CLOUDFRONT_DISTRIBUTION_ID=$(aws ssm get-parameter --name "/cloudfront/cloudfront_distribution_id" --query 'Parameter.Value' --output text)
        API_GATEWAY_URL=$(aws ssm get-parameter --name "/api-gateway/api_gateway_url" --query 'Parameter.Value' --output text)
        LAMBDA_FUNCTION_NAME=$(aws ssm get-parameter --name "/lambda/lambda_function_name" --query 'Parameter.Value' --output text)
        
        export S3_BUCKET="$BUCKET_NAME"
        echo "Resolved from module SSM parameters: S3_BUCKET=$S3_BUCKET, CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID, API_GATEWAY_URL=$API_GATEWAY_URL, LAMBDA_FUNCTION_NAME=$LAMBDA_FUNCTION_NAME"

      # Replace API URL in config file
      - sed -i "s|{{API_GATEWAY_URL}}|$API_GATEWAY_URL|g" web/static/js/config.js

      # Deploy static files to S3 (using cp recursive to avoid ListBucket permission)
      - aws s3 cp web/static/ s3://$S3_BUCKET --recursive
      
      # Package and deploy Lambda function (production-only dependencies)
      - cd web/lambda
      - mkdir -p deployment
      - cp index.js package.json deployment/
      - cd deployment
      - npm install --production
      - zip -r ../lambda-deployment.zip . -x "*.git*" "*.DS_Store*" "*node_modules/.cache*"
      - cd ..
      - aws lambda update-function-code --function-name "$LAMBDA_FUNCTION_NAME" --zip-file fileb://lambda-deployment.zip --region "$AWS_DEFAULT_REGION"
      - rm -rf deployment lambda-deployment.zip
      - cd ../..
      
      # Invalidate CloudFront cache
      - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
      
      - echo "Deployment completed successfully!"

artifacts:
  files:
    - 'web/coverage/**/*'
    - 'web/lambda/coverage/**/*'
  name: web-artifacts

cache:
  paths:
    - 'web/node_modules/**/*'
    - 'web/lambda/node_modules/**/*'
