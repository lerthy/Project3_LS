version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    AWS_REGION: us-east-1

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      # Install dependencies for web frontend
      - npm --prefix web ci || npm --prefix web install
      
      # Install dependencies for Lambda function
      - npm --prefix web/lambda ci || npm --prefix web/lambda install

  pre_build:
    commands:
      - echo "Running frontend quality checks..."
      
      # ESLint for JavaScript
      - npm --prefix web run lint:js
      
      # Stylelint for CSS
      - npm --prefix web run lint:css
      
      # ESLint for Lambda function
      - npm --prefix web/lambda run lint

  build:
    commands:
      - echo "Running tests..."
      
      # Frontend tests with coverage
      - npm --prefix web run test
      
      # Lambda tests with coverage
      - npm --prefix web/lambda run test
      
      - echo "Building static site..."
      # For this project, static files are already built
      # In a real Vite project, you'd run: npm run build

  post_build:
    commands:
      - echo "Waiting for Terraform outputs in SSM, then deploying..."

      # Wait (with timeout) for SSM parameters published by the infra pipeline
      - |
        set -e
        TIMEOUT_SECONDS=${WEB_WAIT_TIMEOUT_SECONDS:-600}
        INTERVAL=10
        ELAPSED=0
        echo "AWS region: ${AWS_REGION:-unset}"
        echo "Waiting up to ${TIMEOUT_SECONDS}s for SSM parameters..."
        until aws ssm get-parameter --name "/project3/outputs/bucket_name" >/dev/null 2>&1; do
          if [ "$ELAPSED" -ge "$TIMEOUT_SECONDS" ]; then
            echo "Timed out waiting for /project3/outputs/bucket_name after ${TIMEOUT_SECONDS}s"; exit 1;
          fi
          echo "Still waiting for /project3/outputs/bucket_name (elapsed ${ELAPSED}s)";
          sleep $INTERVAL; ELAPSED=$((ELAPSED+INTERVAL));
        done
        BUCKET_NAME=$(aws ssm get-parameter --name "/project3/outputs/bucket_name" --query 'Parameter.Value' --output text)
        ELAPSED=0
        until aws ssm get-parameter --name "/project3/outputs/cloudfront_distribution_id" >/dev/null 2>&1; do
          if [ "$ELAPSED" -ge "$TIMEOUT_SECONDS" ]; then
            echo "Timed out waiting for /project3/outputs/cloudfront_distribution_id after ${TIMEOUT_SECONDS}s"; exit 1;
          fi
          echo "Still waiting for /project3/outputs/cloudfront_distribution_id (elapsed ${ELAPSED}s)";
          sleep $INTERVAL; ELAPSED=$((ELAPSED+INTERVAL));
        done
        CLOUDFRONT_DISTRIBUTION_ID=$(aws ssm get-parameter --name "/project3/outputs/cloudfront_distribution_id" --query 'Parameter.Value' --output text)
        ELAPSED=0
        until aws ssm get-parameter --name "/project3/outputs/api_gateway_url" >/dev/null 2>&1; do
          if [ "$ELAPSED" -ge "$TIMEOUT_SECONDS" ]; then
            echo "Timed out waiting for /project3/outputs/api_gateway_url after ${TIMEOUT_SECONDS}s"; exit 1;
          fi
          echo "Still waiting for /project3/outputs/api_gateway_url (elapsed ${ELAPSED}s)";
          sleep $INTERVAL; ELAPSED=$((ELAPSED+INTERVAL));
        done
        API_GATEWAY_URL=$(aws ssm get-parameter --name "/project3/outputs/api_gateway_url" --query 'Parameter.Value' --output text)
        export S3_BUCKET="$BUCKET_NAME"
        echo "Resolved from SSM: S3_BUCKET=$S3_BUCKET, CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID, API_GATEWAY_URL=$API_GATEWAY_URL"

      # Replace API URL in config file
      - sed -i "s|{{API_GATEWAY_URL}}|$API_GATEWAY_URL|g" web/static/js/config.js

      # Deploy static files to S3
      - aws s3 sync web/static/ s3://$S3_BUCKET --delete
      
      # Package and deploy Lambda function (production-only dependencies)
      - cd web/lambda
      - mkdir -p deployment
      - cp index.js package.json deployment/
      - cd deployment
      - npm install --production
      - zip -r ../lambda-deployment.zip . -x "*.git*" "*.DS_Store*" "*node_modules/.cache*"
      - cd ..
      - aws lambda update-function-code --function-name contact-form --zip-file fileb://lambda-deployment.zip --region "$AWS_DEFAULT_REGION"
      - rm -rf deployment lambda-deployment.zip
      - cd ../..
      
      # Invalidate CloudFront cache
      - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
      
      - echo "Deployment completed successfully!"

artifacts:
  files:
    - 'web/coverage/**/*'
    - 'web/lambda/coverage/**/*'
  name: web-artifacts

cache:
  paths:
    - 'web/node_modules/**/*'
    - 'web/lambda/node_modules/**/*'
